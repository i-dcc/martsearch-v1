{
  active:               true,
  debug_mode:           false,
  internal_name:        "sanger_mice",
  display_name:         "Sanger Mice",
  url:                  "/htgt/biomart",
  full_url:             "http://www.sanger.ac.uk/htgt/biomart",
  mart_dataset:         "kermits",
  joined_index_field:   "marker_symbol",
  joined_filter:        "marker_symbol",
  template:             "kermits_mi_data.ejs",
  fetch_attribute_conf: false,
  enabled_attributes: [
    "marker_symbol",
    "sponsor",
    "escell_clone",
    "colony_prefix",
    "escell_strain",
    "test_cross_strain",
    "back_cross_strain",
    "status",
    "allele_name",
    "emma"
  ],
  required_attributes: [
    "status"
  ],
  custom_result_parser: function ( data, docs ) {
    var ds = this;
    var data_by_line = data.split("\n");
    data_by_line.pop(); // Remove the last entry - this is always empty
    
    if ( data_by_line.length > 0 ) {
      var data_by_joined_field = {};
      for (var i=0; i < data_by_line.length; i++) {
          var tmp_hash = {};
          var data_by_item = data_by_line[i].split("\t");
          for (var j=0; j < data_by_item.length; j++) {
            tmp_hash[ ds.enabled_attributes[j] ] = data_by_item[j];
          }
          
          // Correct the <> notation in several attributes...
          tmp_hash["allele_name"]       = ds._fix_superscript_text_in_attribute(tmp_hash["allele_name"]);
          tmp_hash["back_cross_strain"] = ds._fix_superscript_text_in_attribute(tmp_hash["back_cross_strain"]);
          
          // Filter out unwanted rows...
          var save_this_row = true;
          if ( ds.required_attributes !== undefined ) {
            for (var j=0; j < ds.required_attributes.length; j++) {
              if ( tmp_hash[ ds.required_attributes[j] ] === "" ) {
                save_this_row = false;
              }
            }
          }

          if ( save_this_row ) {
            // Specific check that discards mice that aren't genotype confirmed
            if( tmp_hash['status'] === 'Genotype Confirmed' ) {
                if ( data_by_joined_field[ tmp_hash[ ds.joined_filter ] ] === undefined ) {
                  data_by_joined_field[ tmp_hash[ ds.joined_filter] ] = [];
                }
                data_by_joined_field[ tmp_hash[ ds.joined_filter ] ].push(tmp_hash);
            }
          }
      }
      
      var data_to_return = {};
      if ( jQuery.keys(data_by_joined_field).length > 0 ) {
        for (var i=0; i < docs.length; i++) {
          
          // Calculate the content_id - The unique DOM element identifier that this
          // returned data will be injected into
          var content_id = ms._content_id( ds, docs[i][ ds.joined_index_field ] );
          
          // If we have a content_id, process our data
          if ( content_id ) {
            // Set up a temp array to put all of our info into...
            var tmp_array = [];

            // Now collect each row of data that matches this 'joined_index_field'
            if ( typeof docs[i][ ds.joined_index_field ] == 'string' ) {
              // We only have a single value to match to...
              var index_item = docs[i][ ds.joined_index_field ];
              if ( data_by_joined_field[ index_item ] !== undefined ) {
                for (var j=0; j < data_by_joined_field[ index_item ].length; j++) {
                  tmp_array.push( data_by_joined_field[ index_item ][j] );
                }
              }
            }
            else {
              // We have an array of values to match to...
              for (var j=0; j < docs[i][ ds.joined_index_field ].length; j++) {
                var index_item = docs[i][ ds.joined_index_field ][j];

                if ( data_by_joined_field[ index_item ] !== undefined ) {
                  for (var k=0; k < data_by_joined_field[ index_item ].length; k++) {
                    tmp_array.push( data_by_joined_field[ index_item ][k] );
                  }
                }
              }
            }

            data_to_return[ content_id ] = tmp_array;
          }
        }
        
      }
      else {
        data_to_return = false;
      }
      
      return data_to_return;
    }
    else {
      return false;
    }
  }
}
