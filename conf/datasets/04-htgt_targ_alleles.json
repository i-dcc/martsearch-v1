{
  active:               true,
  debug_mode:           false,
  internal_name:        "sanger_vectors_es_cells",
  display_name:         "Sanger ES Cells",
  url:                  "/htgt/biomart",
  full_url:             "http://www.sanger.ac.uk/htgt/biomart",
  mart_dataset:         "htgt_targ",
  joined_index_field:   "marker_symbol",
  joined_filter:        "marker_symbol",
  template:             "htgt_targ_details.ejs",
  fetch_attribute_conf: false,
  enabled_attributes: [
    "is_eucomm",
    "is_komp_csd",
    "is_komp_regeneron",
    "is_norcomm",
    "is_mgp",
    "marker_symbol",
    "ensembl_gene_id",
    "status",
    "status_code",
    "status_type",
    "status_description",
    "status_sequence",
    "pipeline_stage",
    "ikmc_project_id",
    "bac",
    "design_id",
    "design_plate",
    "design_well",
    "intvec_plate",
    "intvec_well",
    "intvec_distribute",
    "targvec_plate",
    "targvec_well",
    "targvec_distribute",
    "backbone",
    "cassette",
    "allele_name",
    "escell_clone",
    "escell_distribute",
    "escell_line",
    "colonies_picked",
    "is_latest_for_gene",
    "targeted_trap"
  ],
  custom_result_parser: function ( data, docs ) {
    var ds = this;
    var results = {};
    var int_results = ds._biomart_tsv2json_ah( data );
    
    // Process the biomart return and organise into projects...
    for (var i=0; i < int_results.length; i++) {
      var result = int_results[i];
      
      // Only store a result if we have a ikmc_project_id and it's not a regeneron project
      if (     result["ikmc_project_id"] !== undefined
            && result["is_komp_regeneron"] !== "1" 
            && result["is_norcomm"] !== "1"
            && result["status_sequence"] >= 95 ) {

        // Set the DOM element id we need to lookup
        var content_id = ms._content_id( ds, result["marker_symbol"] );
        
        // Find or create a result and project entry
        if ( results[ content_id ] == undefined ) { results[ content_id ] = {}; };

        if ( results[ content_id ][ result["ikmc_project_id"] ] == undefined ) {
          results[ content_id ][ result["ikmc_project_id"] ] = {};
        };

        var project = results[ content_id ][ result["ikmc_project_id"] ];

        // Extract the singular (per project) values
        var singular_attributes = [
          "is_eucomm",
          "is_komp_csd",
          "is_komp_regeneron",
          "is_norcomm",
          "is_mgp",
          "marker_symbol",
          "ensembl_gene_id",
          "status",
          "status_code",
          "status_type",
          "status_description",
          "status_sequence",
          "pipeline_stage",
          "ikmc_project_id",
          "bac",
          "design_id",
          "design_plate",
          "design_well",
          "intvec_plate",
          "intvec_well",
          "intvec_distribute",
          "targvec_plate",
          "targvec_well",
          "targvec_distribute",
          "backbone",
          "cassette",
          "allele_name",
          "is_latest_for_gene"
        ];

        for (var j=0; j < singular_attributes.length; j++) {
          project[ singular_attributes[j] ] = result[ singular_attributes[j] ];
        };

        if ( result["escell_clone"] && ( result["escell_distribute"] || result["targeted_trap"] ) ) {
          var show_in_trap_box = 0;
          if( result ["targeted_trap"] ){
            show_in_trap_box = 1;
          }
          // Find or create ES Cell entries for the project
          if ( project["escells"] == undefined ) { project["escells"] = []; };
          
          project["escells"].push({
            escell_clone_name:      result["escell_clone"],
            allele_name:            result["allele_name"],
            escell_line:           result["escell_line"],
            colonies_picked:        result["colonies_picked"],
            escell_distribute:      result["escell_distribute"],
            targeted_trap:   result["targeted_trap"],
            show_in_trap_box:       show_in_trap_box
          });
        };
      };
      
    };
    
    if ( jQuery.keys(results).length > 0 ) {
      return results;
    } else {
      return false;
    }
  },
  post_display_hook: function( content_id ) {
    jQuery('#'+content_id).find("a[rel^='prettyPhoto']").prettyPhoto();
    jQuery('#'+content_id).find("table.tablesorter").tablesorter({ widgets: ['zebra'], sortList: [[0,0]] });
    jQuery('#'+content_id).find('.htgt_targ_allele_progress_clones_toggle').toggleControl('#'+content_id+' .htgt_targ_allele_progress_clones_content', { speed: "fast" });
    jQuery('#'+content_id).find('.htgt_targ_allele_progress_toggle').toggleControl('#'+content_id+' .htgt_targ_allele_progress_content', { speed: "fast" });
  }
}
